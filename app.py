
# Auto-generated from indipro.ipynb
import streamlit as st

st.set_page_config(page_title="Indipro Dashboard", page_icon="📊", layout="wide")

st.markdown(
    """
    <style>
    .main > div {
        max-width: 1200px;
        margin-left: auto;
        margin-right: auto;
    }
    .stMarkdown h1, .stMarkdown h2, .stMarkdown h3 {
        margin-top: 1.2em;
    }
    .topbar {
        padding: 0.6rem 1rem;
        border-radius: 14px;
        background: linear-gradient(90deg, rgba(99,102,241,.12), rgba(56,189,248,.12));
        border: 1px solid rgba(148,163,184,.25);
    }
    </style>
    """,
    unsafe_allow_html=True,
)

with st.container():
    st.markdown('<div class="topbar">', unsafe_allow_html=True)
    st.title("Indipro Dashboard")
    st.caption("从 Jupyter Notebook 自动生成 • 可在侧边栏选择章节浏览内容")
    st.markdown('</div>', unsafe_allow_html=True)

st.sidebar.header("📚 章节/Sections")
section_titles = ['未命名节']
choice = st.sidebar.radio("选择要查看的章节：", section_titles, index=0)

with st.sidebar.expander("🧩 展示原 Notebook 代码片段（只读）"):
    st.write("此处展示从 Notebook 收集的代码，仅供参考。")
    st.code("import pandas as pd\nimport numpy as np\nco2=pd.read_excel('https://raw.githubusercontent.com/YSYK-KKNM/project-data/main/yearly_co2_emissions_1000_tonnes.xlsx')\ngdp=pd.read_excel('https://raw.githubusercontent.com/YSYK-KKNM/project-data/main/gdp_per_capita_yearly_growth.xlsx')\nenergy=pd.read_excel('https://raw.githubusercontent.com/YSYK-KKNM/project-data/main/energy_use_per_person.xlsx')\ndisaster=pd.read_csv('https://raw.githubusercontent.com/YSYK-KKNM/project-data/main/disasters2.csv',skiprows=2)\ntemperature=pd.read_csv('https://raw.githubusercontent.com/YSYK-KKNM/project-data/main/temperature.csv', skiprows=4, na_values=\"-99\")\n\n# ---- cell ----\n\nco2= co2.melt(id_vars='country', var_name='Year', value_name='Emissions')\nco2.rename(columns={'country': 'Country'}, inplace=True)\nco2['Year']=co2['Year'].astype(int)\nco2['Label']='CO2 Emissions (Metric Tons)'\nco2.head()\n\n# ---- cell ----\n\nunique_countries = co2['Country'].unique()\n##print(unique_countries)\n\n# ---- cell ----\n\nprint(gdp.shape)\n\n# ---- cell ----\n\ngdp=gdp.melt(id_vars='country', var_name='Year',value_name='gdp_growth')\ngdp=gdp.rename(columns={'country': 'Country'})\ngdp['Year']=gdp['Year'].astype(int)\ngdp['Label']='GDP Growth/Capita (%)'\ngdp=gdp.rename(columns={'gdp_growth': 'GDP'})\ngdp.head()\n\n# ---- cell ----\n\nenergy=energy.melt(id_vars='country',var_name='Year',value_name='energy_use')\nenergy=energy.rename(columns={'country':'Country','energy_use':'Energy'})\nenergy['Year']=energy['Year'].astype(int)\nenergy['Label']=\"Energy Use (kg,oil-eq./capita)\"\nenergy.head()\n\n# ---- cell ----\n\nsample=energy.sample(n=3, random_state=123)\nsample\n\n# ---- cell ----\n\ncols=['Year']+[col for col in disaster.columns if 'Count' in col]\ndisaster=disaster[cols]\ndisaster.head()\n\n# ---- cell ----\n\ndisasters=disaster[['Year', 'All Disasters Count']].copy()\ndisasters['Country']='United States'\ndisasters= disasters.melt(id_vars=['Year', 'Country'],var_name='Indicator',value_name='Value')\ndisasters['Label']='Number of Disasters'\ndisasters.head(6)\n\n# ---- cell ----\n\ntemperature['Date']=temperature['Date'].astype(str)\ntemperature['Year']=temperature['Date'].str[:4].astype(int)\n\n# ---- cell ----\n\ntemperature['Country']='United States'\ntemperature['Indicator']='Temperature'\ntemperature['Label']='Temperature (Fahrenheit)'\ntemperature=temperature[['Year', 'Country', 'Indicator', 'Value', 'Label']]\ntemperature.head()\n\n# ---- cell ----\n\nco2=co2.rename(columns={'Emissions':'Value'})\nco2['Indicator']='Emissions'\ngdp=gdp.rename(columns={'GDP':'Value'})\ngdp['Indicator']='GDP'\nenergy=energy.rename(columns={'Energy':'Value'})\nenergy['Indicator']='Energy'\n\n# ---- cell ----\n\ncombined=pd.concat([co2, gdp, energy, disasters, temperature], ignore_index=True)\ncombined['Region']=combined['Country'].apply(lambda x:'United States' if x=='United States' else 'Rest of the world')\n##we drop the missing values and sort it by 'Country'\ncombined=combined.dropna().sort_values(by='Country')\ncombined.head()\n\n# ---- cell ----\n\nfrom matplotlib import pyplot as plt\nfig,ax=plt.subplots(figsize=(12,6))\nfor country in co2['Country'].unique():\n    xf=co2.loc[co2['Country']==country]\n    ax.plot(xf['Year'],xf['Value'],alpha=1,\n            color='blue' if country=='United States' else 'gray',\n            linewidth=1.2 if country=='United States' else 0.8,\n            label='United States' if country=='United States' else None)\n##add title,labels for the plot    \nax.set_title('Country $\\mathrm{CO}_2$ Emissions per Year (1751–2014)',fontsize=16)\nax.set_xlabel('Year',fontsize=12)\nax.set_ylabel('Emissions (Metric Tonnes)',fontsize=12)\n## add a legend for USA in order to highlight\nax.legend(fontsize=12)                        \nax.text(0.785, -0.114,'Limited to reporting countries',transform=ax.transAxes,fontsize=12)\nax.tick_params(labelsize=12)\nax.grid(alpha=0.3)\nplt.tight_layout()\nplt.show()\n\n# ---- cell ----\n\nd2014=co2[co2['Year']==2014].copy()\nd2014['rank']=d2014['Value'].rank(ascending=False)\ntop=d2014[d2014['rank']<=10]\ntop\n\n# ---- cell ----\n\netop=co2[(co2['Country'].isin(top['Country']))&(co2['Year']>=1900)].copy()\n\n# ---- cell ----\n\n##we should set the list of color first since every line needs to be colored differenly.\nimport matplotlib.cm as cm\ncns=etop['Country'].unique()\ncolors=cm.viridis(np.linspace(0,1,len(cns)))\n##After determining the colors for the lines, we can start making the plot                  \nfig,ax=plt.subplots(figsize=(12,6))\nfor i,country in enumerate(cns):\n    yf=etop.loc[etop['Country']==country]\n    ax.plot(yf['Year'],yf['Value'],color=colors[i],linewidth=1,alpha=1,label=country)\n    ax.text(yf['Year'].iloc[-1]-3.5, yf['Value'].iloc[-1],country, fontsize=12,color=colors[i])\n##add title,labels,legends for the plot    \nax.set_title('Top 10 Emissions-producing Countries in 2010 (1900-2014)',fontsize=16)\nax.set_xlabel('Year',fontsize=12)\nax.set_ylabel('Emissions (Metric Tonnes)',fontsize=12)\nax.text(0.001,0.96, 'Ordered by Emissions Produced in 2014',transform=ax.transAxes,fontsize=12)\nax.tick_params(labelsize=12)\nax.grid(alpha=0.3)\nplt.tight_layout()\nplt.show()\n\n# ---- cell ----\n\netop['loge']=np.log(etop['Value'])\ntp=top[['Country','rank']]\netop=etop.merge(tp,on='Country',how='left')\netop.sort_values(['rank', 'Year'],inplace=True)\nmapdata=etop.pivot(index='Country',columns='Year',values='loge')\nmapdata.head()\n\n# ---- cell ----\n\nimport seaborn as sns\nfig,ax=plt.subplots(figsize=(12,6))\nsns.heatmap(mapdata,cmap='viridis',cbar_kws={'label':'Ln($\\mathrm{CO}_2$ Emissions)'},xticklabels=5)\n##In this part of code, we can use ax.text to insert title in case it overlaps the sentence under it.\nax.text(0.24, 1.08, 'Top 10 $\\mathrm{CO}_2$ Emission-producing Countries', fontsize=16, transform=ax.transAxes)\nax.text(0.001, 1.03, 'Ordered by Emissions Produced in 2014', fontsize=12, transform=ax.transAxes)\nax.set_xlabel('Year',fontsize=12)\nax.set_ylabel('Country',fontsize=12)\nplt.xticks()\nplt.tight_layout()\nplt.show()\n\n# ---- cell ----\n\nfig,axes=plt.subplots(3,2, figsize=(14, 9), sharex='col',sharey='row')\nindicators=['Emissions', 'Energy', 'GDP']\nregions=['Rest of the world', 'United States']\n## We have to keep the axis scale of plots in the same column or row the same, so we need to limit the scale of the plots in advance.\nxl=(1750, 2025)\nyl=[]\nfor indicator in indicators:\n    lm=combined[combined['Indicator']==indicator]\n    yl.append((lm['Value'].min(), lm['Value'].max()))\n##Now we can complet the plots by traversing every 'axes' with the data of certain indicators and regions.\nfor i, indicator in enumerate(indicators):\n    for j, region in enumerate(regions):\n        ax=axes[i, j]\n        zf=combined[(combined['Indicator']==indicator)&(combined['Region']==region)]\n        for country in zf['Country'].unique():\n            wf=zf[zf['Country']==country]\n            sns.lineplot(data=wf, x='Year', y='Value', ax=ax,color='black', linewidth=0.8, alpha=0.7)\n        ax.set_xlim(xl)\n        ax.set_ylim(yl[i]) \n##applying different labels in the corresponding space on the plot.\n        if i==0:\n            ax.set_title(region, fontsize=14,)\n        if j==0:\n            ax.set_ylabel(indicator, fontsize=12)\n        if i==2:\n            ax.set_xlabel('Year', fontsize=11)        \nplt.tight_layout(rect=[0, 0, 1, 0.97])\nplt.suptitle('Distribution of Indicators by Year and Value', fontsize=16)\nplt.show()\n\n# ---- cell ----\n\n##!pip install statsmodels\nimport statsmodels.api as sm\n## prepare a dataframe 'us' including emissions and temperature of us over time\nus=combined[(combined['Country']=='United States')&(combined['Year'].between(1980,2014))&(combined['Indicator'].isin(['Emissions', 'Temperature']))]\n\nfig, axes=plt.subplots(2, 1, figsize=(12, 6), sharex=True)\ntit=['$\\mathrm{CO}_2$ Emissions (Metric Tons)', 'Temperature (Fahrenheit)']\nfor i, indicate in enumerate(['Emissions', 'Temperature']):\n    tf=us[us['Indicator']==indicate]\n    axes[i].scatter(tf['Year'], tf['Value'], alpha=0.8, color='gray')\n##create the trend lines using statsmodels\n    tr=sm.nonparametric.lowess\n    trc=tr(tf['Value'], tf['Year'],frac=0.4)\n    axes[i].plot(trc[:, 0], trc[:, 1], color='blue', linewidth=2)\n    axes[i].set_title(tit[i], fontsize=14)\n    axes[i].grid(alpha=0.3)  \naxes[1].set_xlabel('Year', fontsize=12)\nplt.suptitle('US Emissions and Temperatures (1980-2014)', fontsize=16)\nplt.show()\n\n# ---- cell ----\n\nli_us=us.pivot(index='Year', columns='Indicator', values='Value').reset_index()\nx=li_us['Emissions']\ny=li_us['Temperature']\n##use model to conduct regression\nx=sm.add_constant(x)\nmodel=sm.OLS(y, x)\nresults=model.fit()\n## make the scatter plot and apply the regression line on it.\nliy=results.predict(x)\nplt.figure(figsize=(12, 6))\nplt.scatter(li_us['Emissions'], li_us['Temperature'], color='gray', alpha=0.7)\nplt.plot(li_us['Emissions'], liy, color='blue', linewidth=2)\nplt.title('US Emissions and Temperature (1980–2014)', fontsize=16)\nplt.xlabel('Emissions (Metric Tonnes)', fontsize=12)\nplt.ylabel('Temperature (Fahrenheit)', fontsize=12)\nplt.grid(alpha=0.3)\nplt.show()\n\n# ---- cell ----\n\nemission_mean=li_us['Emissions'].mean()\nemission_sd=li_us['Emissions'].std()\ntemperature_mean=li_us['Temperature'].mean()\ntemperature_sd=li_us['Temperature'].std()\nprint('Emissions Mean:', round(emission_mean, 2))\nprint('Emissions SD:', round(emission_sd, 2))\nprint('Temperature Mean:', round(temperature_mean, 2))\nprint('Temperature SD:', round(temperature_sd, 2))\n\n# ---- cell ----\n\nli_us['Emissions'].corr(li_us['Temperature'])\n\n# ---- cell ----\n\nfrom sklearn.preprocessing import StandardScaler\ndf=li_us.copy()\n##use StandardScaler to standardize the data\nscaler=StandardScaler()\ndf[['sc_emissions', 'sc_temperature']]=scaler.fit_transform(df[['Emissions', 'Temperature']])\nX=df['sc_emissions']\ny=df['sc_temperature']\n##use model to conduct regression\nX=sm.add_constant(X)\nmodel=sm.OLS(y, X)\nresults=model.fit()\n## make the scatter plot and apply the regression line on it.\ny_sc=results.predict(X)\nplt.figure(figsize=(12, 6))\nplt.scatter(df['sc_emissions'], df['sc_temperature'], label='Standardized CO₂ Emissions', color='black', alpha=0.8)\nplt.plot(df['sc_emissions'], y_sc, color='blue', linewidth=2)\nplt.title('US $\\mathrm{CO}_2$ Emissions and Temperature (1980-2014)', fontsize=16)\nplt.xlabel('Scaled Emissions (Metric Tonnes)', fontsize=12)\nplt.ylabel('Scaled Temperature (Fahrenheit)', fontsize=12)\nplt.grid(alpha=0.3)\nplt.show()\n\n\n# ---- cell ----\n\n##the composition of the summary plot is complex since the third plot is composed of two subplots itself, so we need to use gridspec to accurately divide the space.\nfrom matplotlib import gridspec as grs\nfrom matplotlib.gridspec import GridSpecFromSubplotSpec as grss\nfig=plt.figure(figsize=(14, 10))\ngs=grs.GridSpec(2,2, figure=fig,hspace=0.3,wspace=0.3)\n##the first plot\nax1=fig.add_subplot(gs[0, 0])\nfor country in co2['Country'].unique():\n    xf=co2.loc[co2['Country']==country]\n    ax1.plot(xf['Year'], xf['Value'],alpha=1,linewidth=1,\n             color='blue' if country=='United States' else 'gray',\n             label='United States' if country=='United States' else None)\nax1.set_title('Country $\\mathrm{CO}_2$ Emissions per Year (1751–2014)',fontsize=12)\nax1.set_xlabel('Year',fontsize=10)\nax1.set_ylabel('Emissions (Metric Tonnes)',fontsize=10)\nax1.legend()\nax1.text(0.6,-0.15, 'Limited to reporting countries', transform=ax1.transAxes,fontsize=9)\nax1.tick_params(labelsize=8)\nax1.grid(alpha=0.3)\n\n##the second plot\nax2=fig.add_subplot(gs[0, 1])\nsns.heatmap(mapdata, cmap='viridis', cbar_kws={'label': 'Ln($\\mathrm{CO}_2$ Emissions)'}, xticklabels=5, ax=ax2)\nax2.text(0.24,1.08, 'Top 10 $\\mathrm{CO}_2$ Emission-producing Countries', fontsize=12, transform=ax2.transAxes)\nax2.text(0.001,1.03, 'Ordered by Emissions Produced in 2014', fontsize=9, transform=ax2.transAxes)\nax2.set_xlabel('Year', fontsize=10)\nax2.set_ylabel('Country', fontsize=10)\nax2.tick_params(labelsize=8)\n\n##the third plot (with two subplots)\nsubgs=grss(2, 1, subplot_spec=gs[1, 0])\nax3u=fig.add_subplot(subgs[0])\nax3d=fig.add_subplot(subgs[1], sharex=ax3u)\ntitles=['$\\mathrm{CO}_2$ Emissions (Metric Tons)', 'Temperature (Fahrenheit)']\nfor ax, indicate, title in zip([ax3u, ax3d], ['Emissions', 'Temperature'], titles):\n    tf=us[us['Indicator']==indicate]\n    ax.scatter(tf['Year'], tf['Value'], alpha=0.8, color='gray')\n    trs=sm.nonparametric.lowess(tf['Value'], tf['Year'], frac=0.4)\n    ax.plot(trs[:, 0], trs[:, 1], color='blue', linewidth=2)\n    ax.set_title(title, fontsize=12)\n    ax.grid(alpha=0.3)\nax3d.set_xlabel('Year', fontsize=10)\nax3u.tick_params(axis='x',labelbottom=False)\nax3d.tick_params(labelsize=8)\n\n##the fourth plot\nax4=fig.add_subplot(gs[1, 1])\nax4.scatter(df['sc_emissions'], df['sc_temperature'], label='Standardized $\\mathrm{CO}_2$ Emissions', color='black', alpha=0.8)\nax4.plot(df['sc_emissions'], y_sc, color='blue', linewidth=2)\nax4.set_title('US $\\mathrm{CO}_2$ Emissions and Temperature (Standardized)', fontsize=12)\nax4.set_xlabel('Scaled Emissions (Metric Tonnes)', fontsize=10)\nax4.set_ylabel('Scaled Temperature (Fahrenheit)', fontsize=10)\nax4.grid(alpha=0.3)\nax4.tick_params(labelsize=8)\nplt.show()", language="python")

md_map = {
'未命名节': '## 未命名节\n<h1 style="font-size:36px; font-family:\'Times New Roman\', serif; color:#333333;">\n  Individual Project\n</h1>\n\n<h1 style="font-size:28px; font-family:\'Times New Roman\', serif; color:#333333;">\n  1. Main Question\n</h1>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  1.1 How have global $\\mathrm{CO}_2$ emission rates changed over time? In particular for the US, and how does the US compare to other countries?<br>\n  2.2 Are $\\mathrm{CO}_2$ emissions in the US, global temperatures, and natural disaster rates in the US associated?\n</p>\n\n<h1 style="font-size:28px; font-family:\'Times New Roman\', serif; color:#333333;">\n  2. What Is the Data\n</h1>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  In this case, we will use data related to $\\mathrm{CO}_2$ emissions, and it includes data regarding percent yearly growth of GDP per capita, energy use per person, which are extracted from Gapminder that was originally obtained from the World Bank. Besides, there is also data of US natural disasters and temperature from the National Oceanic and Atmospheric Administration (NOAA), which is an agency that collects weather and climate data.<br>\n    All raw data mentioned above are uploaded to a github repository saved as CSV or Excel files.\n</p>\n\n<h1 style="font-size:28px; font-family:\'Times New Roman\', serif; color:#333333;">\n  3. Data Import\n</h1>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  The data can be imported by the url links which connect the github repository storing the data files.\n</p>\n\n<h1 style="font-size:28px; font-family:\'Times New Roman\', serif; color:#333333;">\n  4. Data Wrangling\n</h1>\n\n<h2 style="font-size:20px; font-family:\'Times New Roman\', serif; color:#333333e;">\n  4.1 Yearly $\\mathrm{CO}_2$ Emissions\n</h2>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  The raw data of yearly $\\mathrm{CO}_2$ emissions is converted to a dataframe with columns \'Country\', \'Year\', \'Emissions\' and \'Label\'. The first five rows of data are demonstrated in the output.\n</p>\n\n<h2 style="font-size:20px; font-family:\'Times New Roman\', serif; color:#333333e;">\n  4.2 Yearly Growth in GDP per Capita\n</h2>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  We first take a look at the number of rows and columns of the raw data.\n</p>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  Then, we convert it into the dataframe which is similar to the one made in 4.1.\n</p>\n\n<h2 style="font-size:20px; font-family:\'Times New Roman\', serif; color:#333333e;">\n  4.3 Energy Use Per Person\n</h2>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  Now we do the same operation on the raw data of energy use per person.\n</p>\n\n<h2 style="font-size:20px; font-family:\'Times New Roman\', serif; color:#333333e;">\n  4.4 Disasters of USA\n</h2>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  Since we are only interested in the number of disasters that have taken place, we can screen out the columns containing the string \'Count\'.\n</p>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  We can now calculate the sum of all disasters that have taken place in USA every year.\n</p>\n\n<h2 style="font-size:20px; font-family:\'Times New Roman\', serif; color:#333333e;">\n  4.5 Temperature\n</h2>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  The date recorded in the raw data is too long, so we cut it and only keep the year of the date.\n</p>\n\n<h2 style="font-size:20px; font-family:\'Times New Roman\', serif; color:#333333e;">\n  4.6 Joining Data\n</h2>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n   Now we are going to combine all the data above for further visualization and analysis.<br>\n   At first, we should adjust and standardize the format of those datasets in order to concat them smoothly.\n</p>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n   Then,we can concat these datasets and add a column \'Region\' to separate the data of USA from that of other countries.\n</p>\n\n<h1 style="font-size:28px; font-family:\'Times New Roman\', serif; color:#333333;">\n  5. Data Visualization\n</h1>\n\n<h2 style="font-size:20px; font-family:\'Times New Roman\', serif; color:#333333e;">\n  5.1 Country $\\mathrm{CO}_2$ Emissions per Year (1751–2014)\n</h2>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n   Now we can visualize the data wrangled. The following code aims to make a chart illustrating how $\\mathrm{CO}_2$ emissions have changed over time in each country. In particular, the data of the United States is highlighted by a blue line.\n</p>\n\n<h2 style="font-size:20px; font-family:\'Times New Roman\', serif; color:#333333e;">\n  5.2 Top 10 Emissions-producing Countries in 2010 (1900-2014)\n</h2>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  In this part, we are going to figure out the top 10 emission producing countries in 2014, and a chart is going to be made to demonstrate the how $\\mathrm{CO}_2$\n emissions have changed over time in these countries.\n</p>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  We first select all the emission data of 2014 and rank them.<br>\n    In the following code, \'d2014\' is a dataframe including data regarding emissions in only 2014 while \'top\' is a dataframe picking out top 10 emission producing countries in 2014.\n</p>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  Next, we will extract the data from 1900 to 2014 of these 10 countries, which is included in a new dataframe \'etop\'.\n</p>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  After obtaining the data we want, we can draw the plot now.\n</p>\n\n<h2 style="font-size:20px; font-family:\'Times New Roman\', serif; color:#333333e;">\n  5.3 Tile Plot of the Top 10 $\\mathrm{CO}_2$ Emission-producing Countries\n</h2>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  A tile plot is demonstrated as follows, which vividly illustrate the change of $\\mathrm{CO}_2$ emission of the 10 countries since 1900.\n</p>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  Before producing the tile plot, we may merge the dataframe \'etop\' (which includes emission data of the 10 countries since 1900) and the dataframe \'top\' (which includes the rank of the 10 countries).This will help us make the bars on the plot in a certain order.<br>\nAnd \'mapdata\' is the well-prepared dataframe that we will use for plotting.\n</p>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  Now we can make the tile plot using seaborn.\n</p>\n\n<h2 style="font-size:20px; font-family:\'Times New Roman\', serif; color:#333333e;">\n  5.4 Facet figure: Distributions of Indicators By Year And Value\n</h2>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  In order to present the variations of emissions, energy as well as GDP growth simultaneously, we need to make a facet figure. It also highlights the difference of these variations between USA and other countries.<br>\n    In addition to matplotlib, seaborn is also used in this part of coding in order to make the lineplots clearer.\n</p>\n\n<h2 style="font-size:20px; font-family:\'Times New Roman\', serif; color:#333333e;">\n  5.5 Relationship between Variations of Emission Levels And Temperature in USA\n</h2>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  In this part, we pay more attention to the relationship between the variation of emissions and temperature in USA.<br>\nWe now first have to observe the patterns of the variation of emission levels and average annual temperatures over time.\n</p>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  To explore the relationship between temperature and emissions, we can use linear regression models to demonstrate its pattern.\n</p>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  Before applying the model, we first creat a dataframe \'li_us\' which includes data regarding emissions and temperature of USA over time.\n</p>\n\n<h1 style="font-size:28px; font-family:\'Times New Roman\', serif; color:#333333;">\n  6. Data Analysis\n</h1>\n\n<h2 style="font-size:20px; font-family:\'Times New Roman\', serif; color:#333333e;">\n  6.1 Mean And SD for Emissions and Temperature\n</h2>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  Through the output above, we know that the mean and the standard deviation of emissions in USA are 5142285.71 and 450549.24, while the mean and the standard deviation of temperature in USA are 52.87 and 0.89. \n</p>\n\n<h2 style="font-size:20px; font-family:\'Times New Roman\', serif; color:#333333e;">\n  6.2 Correlation Coefficient for Emissions And Temperature\n</h2>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  We use the dataframe \'li_us\' which was created in 5.5 to calculate the corrrelation coefficient.\n</p>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  The output above implies that the correlation coefficient for emissions and temperature is 0.4712.\n</p>\n\n<h2 style="font-size:20px; font-family:\'Times New Roman\', serif; color:#333333e;">\n  6.3 Regression for Scaled Temperature And Scaled $\\mathrm{CO}_2$ Emissions of USA Over Time\n</h2>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n  Coding of this part is similar to that of 5.5, but we have to standardize the data using StandardScaler before making the plot.\n</p>\n\n<h1 style="font-size:28px; font-family:\'Times New Roman\', serif; color:#333333;">\n  7. Summary\n</h1>\n\n<h2 style="font-size:20px; font-family:\'Times New Roman\', serif; color:#333333e;">\n  7.1 Summary Plot\n</h2>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n   A summary plot is made to conclude the main outputs achieved above.\n</p>\n\n<h2 style="font-size:20px; font-family:\'Times New Roman\', serif; color:#333333e;">\n  7.2 Synopsis\n</h2>\n\n<p style="font-size:16px; font-family:\'Times New Roman\', serif; color:#333333; line-height:1.6;">\n   In this study, we collected data of $\\mathrm{CO}_2$ emissions of many countries from 1751 to 2014. We found that the emissions of most countries reported have decreased while a few countries have high levels of emissions.<br>\n    We also tried to explore the relationship between $\\mathrm{CO}_2$ emissions and some other index such as GDP growth, energy use, the number of disasters have taken place and temperature. The correlation coefficient calculated can show their relevance. We discovered that $\\mathrm{CO}_2$ may account for the increase of global temperatures based on their relationship demonstrated in the analysis above. Therefore, it is sensible of us to lay emphasis on containing greenhouse gas emissions, especially $\\mathrm{CO}_2$ emissions in order to control the temperature of the world.\n</p>'
}

st.markdown(md_map.get(choice, "（未找到内容）"))

left, right = st.columns(2)
with left:
    st.subheader("📈 小示例：占位图表")
    st.line_chart({"示例A":[1,3,2,4,3]})
with right:
    st.subheader("📋 小示例：占位表格")
    st.dataframe({"列1":[1,2,3], "列2":["a","b","c"]})

st.info("提示：把上面的占位图表/表格替换为你的实际可视化即可。")
